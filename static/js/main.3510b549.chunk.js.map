{"version":3,"sources":["APIS/APIKey.js","components/layout/NavbarPage.js","actions/searchAction.js","APIS/OMDB.js","actions/types.js","components/layout/Spinner.js","components/home/Movie.js","components/home/SearchFrom.js","components/home/MovieCard.js","components/home/MoviesContainer.js","components/home/Landing.js","reducers/searchReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","APIKey","Component","setLoading","axios","create","baseURL","type","spinner","Spinner","animation","variant","Movie","this","props","fetchMovie","match","params","id","console","log","loading","movie","movieInfo","Fragment","src","Poster","ListGroup","Item","Title","Released","Actors","imdbRating","Plot","Production","content","className","connect","state","movies","dispatch","get","then","response","payload","data","catch","err","SearchForm","onChange","e","searchMovie","target","value","onSubmit","preventDefault","fetchMovies","text","name","placeholder","React","MovieCard","CardGroup","Card","to","imdbID","Img","Body","Year","Footer","MoviesContainer","Response","Search","map","index","key","style","color","Error","Landing","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3510b549.chunk.js","sourcesContent":["module.exports = {\r\n    APIKey: 'abbb376d'\r\n    \r\n}","import React, { Component } from 'react'\r\nimport { Navbar } from \"react-bootstrap\";\r\n\r\nexport default class NavbarPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                 <Navbar bg=\"light\">\r\n    <Navbar.Brand href=\"#home\">Brand link</Navbar.Brand>\r\n  </Navbar>\r\n  <br />\r\n  <Navbar bg=\"light\">\r\n    <Navbar.Brand>Brand text</Navbar.Brand>\r\n  </Navbar>\r\n  <br />\r\n  <Navbar bg=\"dark\">\r\n    <Navbar.Brand href=\"#home\">\r\n      <img\r\n        src=\"/logo.svg\"\r\n        width=\"30\"\r\n        height=\"30\"\r\n        className=\"d-inline-block align-top\"\r\n        alt=\"React Bootstrap logo\"\r\n      />\r\n    </Navbar.Brand>\r\n  </Navbar>\r\n  <br />\r\n  <Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"#home\">\r\n      <img\r\n        alt=\"\"\r\n        src=\"/logo.svg\"\r\n        width=\"30\"\r\n        height=\"30\"\r\n        className=\"d-inline-block align-top\"\r\n      />{' '}\r\n      React Bootstrap\r\n    </Navbar.Brand>\r\n  </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"," import {SEARCH_MOVIE, FETCH_MOVIES, FETCH_MOVIE, LOADING } from './types';\r\n import OMDB from '../APIS/OMDB';\r\n import axios from 'axios';\r\n //import APIKey from '../APIS/APIKey';\r\n\r\n const APIKey = 'abbb376d'\r\n\r\n\r\n export const searchMovie = text => dispatch => {\r\n    //console.log('search Action text:', text) \r\n    dispatch( {\r\n        type:SEARCH_MOVIE,\r\n        payload: text,\r\n     }\r\n     \r\n     )\r\n }\r\n\r\n//  export const fetchMovies = text => async dispatch => {\r\n//     const response = await OMDB.get(`${text}`);\r\n//    dispatch({\r\n//         type:FETCH_MOVIES,\r\n//         payload: response.data\r\n//     })\r\n//     //console.log('search payload:', response.data )\r\n//     // .catch(err =>console.log('Fetching error', err))\r\n//  } \r\n export const fetchMovies = text => dispatch => {\r\n    axios.get(`http://www.omdbapi.com/?apikey=${APIKey}&s=${text}`)\r\n    .then(response => dispatch({\r\n        type:FETCH_MOVIES,\r\n        payload: response.data\r\n    }))\r\n    .catch(err =>console.log('Fetching error:', err))\r\n } \r\n\r\n export const fetchMovie = id => dispatch => {\r\n   axios.get(`http://www.omdbapi.com/?apikey=${APIKey}&i=${id}`)\r\n   .then(response => dispatch({\r\n       type:FETCH_MOVIE,\r\n       payload: response.data\r\n   }))\r\n   //.then((payload) => console.log(payload))\r\n   \r\n   .catch(err =>console.log('Fetching error', err))\r\n} \r\n\r\nexport const setLoading = () => {\r\n    return {\r\n        type: LOADING,\r\n    }\r\n}","import axios from 'axios';\r\nimport {APIKey} from './APIKey'\r\n\r\n\r\nexport default axios.create ({\r\n    baseURL:`http://www.omdbapi.com/?apikey=${APIKey}&s=`\r\n});","export const SEARCH_MOVIE = 'SEARCH_MOVIE'\r\nexport const FETCH_MOVIES = 'FETCH_MOVIES'\r\nexport const FETCH_MOVIE = 'FETCH_MOVIE'\r\nexport const LOADING = 'LOADING'\r\n","import React from 'react'\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\n\r\nexport default function spinner() {\r\n    return (\r\n        <div>\r\n               <Spinner animation=\"border\" variant=\"primary\" />\r\n  <Spinner animation=\"border\" variant=\"secondary\" />\r\n  <Spinner animation=\"border\" variant=\"success\" />\r\n  <Spinner animation=\"border\" variant=\"danger\" />\r\n  <Spinner animation=\"border\" variant=\"warning\" />\r\n  <Spinner animation=\"border\" variant=\"info\" />\r\n  <Spinner animation=\"border\" variant=\"light\" />\r\n  <Spinner animation=\"border\" variant=\"dark\" />\r\n  <Spinner animation=\"grow\" variant=\"primary\" />\r\n  <Spinner animation=\"grow\" variant=\"secondary\" />\r\n  <Spinner animation=\"grow\" variant=\"success\" />\r\n  <Spinner animation=\"grow\" variant=\"danger\" />\r\n  <Spinner animation=\"grow\" variant=\"warning\" />\r\n  <Spinner animation=\"grow\" variant=\"info\" />\r\n  <Spinner animation=\"grow\" variant=\"light\" />\r\n  <Spinner animation=\"grow\" variant=\"dark\" />\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {ListGroup} from 'react-bootstrap';\r\nimport {fetchMovie, setLoading} from '../../actions/searchAction';\r\nimport Spinner from '../layout/Spinner';\r\n\r\n\r\nclass Movie extends Component {\r\n    \r\n    componentDidMount() {\r\n        this.props.fetchMovie(this.props.match.params.id)\r\n        this.props.setLoading()\r\n\r\n        console.log('props:', this.props)\r\n    }\r\n\r\n    render() {\r\n        //console.log('movie:',this.props.movie)\r\n        const {loading, movie} = this.props\r\n        \r\n        let movieInfo = (\r\n            <React.Fragment>\r\n            <img src={movie.Poster} />\r\n            <ListGroup>\r\n                <ListGroup.Item>{movie.Title}</ListGroup.Item>\r\n                <ListGroup.Item>{movie.Released}</ListGroup.Item>\r\n                <ListGroup.Item>{movie.Actors}</ListGroup.Item>\r\n                <ListGroup.Item>{movie.imdbRating }</ListGroup.Item>\r\n                <ListGroup.Item>{movie.Plot}</ListGroup.Item>\r\n                <ListGroup.Item>{movie.Production}</ListGroup.Item>\r\n            </ListGroup> \r\n            </React.Fragment>\r\n        )\r\n\r\n         let content = loading ? <Spinner /> : movieInfo; \r\n        \r\n        return (\r\n            <div className=\"container\">\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log('ownprops:', ownProps)\r\n    return{\r\n    movie:state.movies.movie\r\n}\r\n} \r\n\r\nexport default connect(mapStateToProps, { fetchMovie, setLoading})(Movie)\r\n","import React from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nimport {searchMovie, fetchMovies, setLoading} from '../../actions/searchAction';\r\n\r\n\r\nclass SearchForm extends React.Component {\r\n\r\n    //we take the value and pass it to action\r\n    //we set text state into the action payload \r\n    onChange = e => {\r\n        //console.log('onChange:', e.target.value)\r\n        this.props.searchMovie(e.target.value)\r\n    } \r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        //we can use state that is in mapStateToProps\r\n        this.props.fetchMovies(this.props.text)\r\n        this.props.setLoading()\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid mt-5 text-center\">\r\n                <h1 className =\"display-4 mb-3\">\r\n                    <i className=\"fa fa-search\"/> Search for movies\r\n                </h1>\r\n                <form id=\"searchFrom\" onSubmit={this.onSubmit}>\r\n                    <input \r\n                    type= \"text\"\r\n                    className=\"form-control\"\r\n                    name=\"searchText\"\r\n                    placeholder=\"Search Movies\"\r\n                    onChange={this.onChange}\r\n                    />\r\n                </form>\r\n            </div>\r\n          );\r\n    }\r\n  \r\n}\r\n\r\n//go to  combine reducer movies:searchReducer then\r\n//go to searchReducer then find text\r\nconst mapStateToProps = (state) => ({\r\n    text:state.movies.text\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, \r\n    {searchMovie, fetchMovies, setLoading} )\r\n    (SearchForm);","import React, { Component } from 'react'\r\nimport {Card, CardGroup} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class MovieCard extends Component {\r\n    render() {\r\n        const {movie} = this.props\r\n        //console.log('movie:', movie)\r\n        return (\r\n            // <div className=\"container\">\r\n            //   <Card style={{ width: '18rem' }}>\r\n            //         <Card.Img variant=\"top\" src={movie.Poster} />\r\n            //         <Card.Body>\r\n            //             <Card.Title>{movie.Title} - {movie.Year}</Card.Title>\r\n            //             <Button variant=\"primary\">Details</Button>\r\n            //         </Card.Body>\r\n            //     </Card>\r\n            // </div>\r\n            <CardGroup>\r\n            <Card>\r\n              <Link to={`/movie/${movie.imdbID}`}>\r\n              <Card.Img variant=\"top\" src={movie.Poster} />\r\n              <Card.Body>\r\n                <Card.Title>{movie.Title} - {movie.Year}</Card.Title>\r\n              </Card.Body>\r\n              <Card.Footer>\r\n                <small className=\"text-muted\"></small>\r\n              </Card.Footer>\r\n              </Link>\r\n            </Card>\r\n          </CardGroup>\r\n        )\r\n    }\r\n}\r\n// const mapStateToProps = () => ({\r\n//     movie:state\r\n// })\r\n\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\n\r\nimport MovieCard from './MovieCard';\r\n\r\n\r\n\r\nexport class MoviesContainer extends Component {\r\n\r\n    render() {\r\n        const movies = this.props.movies;\r\n        let content = '';   \r\n\r\n        //console.log('prop:', typeof(this.props.movies))\r\n        console.log('movies:', movies)\r\n\r\n        //check if there are movies in movies array\r\n        //is so return MovieCard, otherwise return null\r\n        content = movies.Response == \"True\" \r\n        ? movies.Search.map((movie, index) => <MovieCard key={index} movie={movie} />) \r\n        : <div style={{color:\"red\"}}> {movies.Error} </div>;\r\n        //console.log('content after:', content)\r\n        \r\n        return (\r\n            <div className=\"row\"> \r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateTProps = state => ({\r\n    movies: state.movies.movies\r\n})\r\nexport default connect(mapStateTProps)(MoviesContainer)","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport SearcForm from './SearchFrom';\r\nimport Spinner from '../layout/Spinner';\r\nimport MoviesContainer from './MoviesContainer';\r\n\r\n\r\n\r\n\r\n class Landing extends Component {\r\n    render() {\r\n        //check if loading true or false\r\n        const {loading} = this.props\r\n        return (\r\n            <div className=\"container\">\r\n                <SearcForm />\r\n                {loading ? <Spinner /> : <MoviesContainer />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStatetoProps = state => ({\r\n    loading :state.movies.loading\r\n})\r\nexport default connect(mapStatetoProps, )(Landing)","import {SEARCH_MOVIE, FETCH_MOVIES, FETCH_MOVIE, LOADING} from '../actions/types';\r\n\r\nconst initialState = {\r\n    text : '',\r\n    movies : [],\r\n    loading : false,\r\n    movie : [], \r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SEARCH_MOVIE:\r\n            return {\r\n                ...state,\r\n                text: action.payload,\r\n                loading: false,\r\n            }\r\n            case FETCH_MOVIES:\r\n            return {\r\n                ...state,\r\n                movies: action.payload,\r\n                loading:false,\r\n            }\r\n            case FETCH_MOVIE:\r\n            return {\r\n                ...state,\r\n                movie: action.payload,\r\n                loading:false,\r\n            }\r\n            case LOADING:\r\n            return {\r\n                ...state,\r\n                loading:true,\r\n            }\r\n\r\n        default :\r\n        return state\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport searchReducer from './searchReducer';\r\n\r\nexport default combineReducers( {\r\n    movies : searchReducer,\r\n})","import { createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n//import * as thunk from \"redux-thunk\"; \r\nimport { composeWithDevTools} from 'redux-devtools-extension/developmentOnly';\r\nimport rootReducer from './reducers';\r\n\r\nconst middleware = [thunk];\r\nconst initialState = {};\r\n\r\nconst store = createStore(\r\n    rootReducer, \r\n    initialState,\r\n    composeWithDevTools(\r\n        applyMiddleware(...middleware))\r\n    );\r\n\r\nexport default store;","import React from 'react';\nimport NavbarPage from './components/layout/NavbarPage';\nimport Movie from './components/home/Movie';\nimport Landing from './components/home/Landing';\nimport {Provider} from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport store from './store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div>\n        \n          <div className=\"container\">\n            <div className = \"row\">\n              <Switch>\n                <Route  path=\"/\" exact component={Landing} />\n                <Route  path=\"/movie/:id\" component={Movie}/>\n              </Switch>\n            </div>\n          </div>\n        </div>\n\n    </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}